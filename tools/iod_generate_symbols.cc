#include <iostream>
#include <fstream>
#include <string>
#include <boost/regex.hpp>

std::string symbol_definition(std::string s);

// Iod symbols generator.
//
//    For each variable name starting with underscore, generates a symbol
//    definition.
//
int main(int argc, char* argv[])
{
  using namespace std;

  if (argc < 3)
  {
    cout << "Usage: " << argv[0] << " input_cpp_file1, ..., input_cpp_fileN, output_cpp_header_file" << endl;
    return 1;
  }
  
  set<string> symbols;
  boost::regex symbol_regex(".?_([[:alnum:]_]+)");

  auto parse_file = [&] (std::string filename) {
    
    ifstream f(filename);
    if (!f)
    {
      std::cerr << "Cannot open file " << argv[1] << " for reading." << std::endl;
    }
  
    std::string line;
    bool in_raw_string = false;
    while (!f.eof())
    {
      getline(f, line);

      std::vector<int> dbl_quotes_pos;
      bool escaped = false;
      for (int i = 0; i < line.size(); i++)
      {
        if (line[i] == '"' and !escaped) dbl_quotes_pos.push_back(i);
        else if (line[i] == '\\') escaped = !escaped;
        else escaped = false;
      }

      auto is_in_string = [&] (int p) {
        int i = 0;
        while (i < dbl_quotes_pos.size() and dbl_quotes_pos[i] <= p) i++;
        return i % 2;
      };

      std::string::const_iterator start, end;
      start = line.begin();
      end = line.end();
      boost::match_results<std::string::const_iterator> what;
      boost::match_flag_type flags = boost::match_default;
      while(regex_search(start, end, what, symbol_regex, flags))
      {
        std::string m = what[0];
        std::string s = what[1];

        bool is_type = s.size() >= 2 and s[s.size() - 2] == '_' and s[s.size() - 1] == 't';
        if (!std::isalnum(m[0]) and !is_in_string(what.position()) and !is_type)
          symbols.insert(what[1]);
        start = what[0].second;      
      }

    }
  };

  for (int i = 1; i < argc - 1; i++)
    parse_file(argv[i]);
  
  std::ofstream os(argv[argc - 1]);
  if (!os)
  {
    std::cerr << "Cannot open file " << argv[2] << " for writing." << std::endl;
    return 2;
  }

  os << "// Generated by iod_generate_symbols."  << endl;
  std::stringstream symbols_content;
  os << "#include <iod/symbol.hh>" << endl;
  for (string s : symbols)
  {
    os << symbol_definition(s) << endl;
  }
}

std::string symbol_definition(std::string s)
{
  std::string body;
  if (std::isdigit(s[0]))
  {
    body = R"cpp(#ifndef IOD_SYMBOL___S__
#define IOD_SYMBOL___S__
    iod_define_number_symbol(__S__)
#endif
)cpp";
    // Check the string is actually a number.
    for (int i = 0; i < s.size(); i++)
      if (!std::isdigit(s[i])) return "";
  }
  else
    body = R"cpp(#ifndef IOD_SYMBOL___S__
#define IOD_SYMBOL___S__
    iod_define_symbol(__S__)
#endif
)cpp";

  boost::regex s_regex("__S__");
  body = boost::regex_replace(body, s_regex, s);
  return body;
}
